<?php

/**
 * @file
 */

/**
 * Implements hook_theme().
 */
function hps_media_theme($existing, $type, $theme, $path) {
  return array(
    'hps_media_player' => array(
      'render element' => 'element',
      'pattern' => 'hps_media_player__',
    ),
    'hps_media_youtube' => array(
      'render element' => 'element',
      'pattern' => 'hps_media_youtube__',
    ),
    'hps_media_youtube_still' => array(
      'render element' => 'element',
      'pattern' => 'hps_media_youtube_still__',
    ),
  );
}
/**
 * Implements hook_element_info().
 */
function hps_media_element_info() {
  return array(
    'hps_media_player' =>  array(
      '#pre_render' => array('hps_media_pre_render_hps_media_player'),
      '#theme' => 'hps_media_player',
      '#prefix' => '',
      '#prefix_classes' => array('jwplayer__container'),
      '#suffix' => '',
      '#attached' => array(
        'css' => _hps_media_css(),
        'js' => _hps_media_player_library_js(),
      ),
      '#player' => _hps_media_player_library_info(),
    ),
    'hps_media_youtube' =>  array(
      '#theme'  => 'hps_media_youtube',
      '#prefix' => '<div class="ytplayer__container">',
      '#suffix' => '</div>',
      '#attached' => array(
        'css' => _hps_media_css(),
      ),
    ),
    'hps_media_youtube_still' =>  array(
      '#theme'    => 'hps_media_youtube_still',
      '#prefix'   => '<div class="ytstill__container">',
      '#suffix'   => '</div>',
      '#version'  => 'default',
      '#hostname' => 'i3.ytimg.com',
      '#alt'      => '',
    ),
  );
}

/**
 * Pre render callback for hps_media_player element.
 *
 * Checks that we have everything we need to render element using local player,
 * if we don't then it sets access to false.
 */
function hps_media_pre_render_hps_media_player($element) {
  // Check mimetype is supported and return #access=FALSE if its not.
  if (!isset($element['#element']['filemime'])) {
    $element['#element']['filemime'] = file_get_mimetype($element['#element']['url']);
  }
  if (!hps_media_is_mimetype_supported($element['#element']['filemime'])) {
    $element['#access'] = FALSE;
    return $element;
  }

  // Carry on with checks since mimetype is supported.

  // Add some useful classes to container element.
  // @note We can't use class attribute on element itself because jwplayer
  //       library overrides its.
  if ($element['#element']['audio'] = _hps_media_is_audio($element['#element']['filemime'])) {
    $element['#prefix_classes'][] = 'jwplayer--audio';
  }
  if ($element['#element']['video'] = _hps_media_is_video($element['#element']['filemime'])) {
    $element['#prefix_classes'][] = 'jwplayer--video';
  }

  if (isset($element['#element']['image'])
    && !empty($element['#element']['image'])
  ) {
    $element['#prefix_classes'][] = 'jwplayer--with-image';
  }
  else {
    // Make it null for simpler conditional statements in theme.
    $element['#element']['image'] = NULL;
    $element['#prefix_classes'][] = 'jwplayer--without-image';
  }

  if (empty($element['#prefix']) && !empty($element['#prefix_classes'])) {
    $element['#prefix'] = '<div class="'
                        . implode(' ', $element['#prefix_classes'])
                        . '">';
    $element['#suffix'] = '</div>';
  }

  // Local player needs unique id attributes for each video
  if (!isset($element['#element']['attributes']['id'])) {
    $element['#element']['attributes']['id'] = drupal_html_id('jwplayer');
  }

  return $element;
}

/**
 * Implements theme_hook().
 */
function theme_hps_media_player($variables) {
  // @note We don't use $variables['element']['#element']['attributes']['class']
  //       because jwplayer replaces them. If custom classes are needed they
  //       will have to be added to container e.g. alter #prefix
  $player_settings = array(
    "'file':   '{$variables['element']['#element']['url']}',",
    "'width':  '100%'"
  );
  if ($variables['element']['#element']['audio']
    && !$variables['element']['#element']['image']
  ) {
    $player_settings[] = ",'height':  '40'";
  }
  else {
    // Video or we have an image to go with audio
    $player_settings[] = ",'aspectratio': '16:9'";
  }
  if ($variables['element']['#element']['image']) {
    $player_settings[] = ",'image': '{$variables['element']['#element']['image']}'";
  }
  $player_settings = implode('', $player_settings);
  $output = array(
    '<div',
    " id=\"{$variables['element']['#element']['attributes']['id']}\"",
    '></div>',
    '<script type="text/javascript">',
    "jwplayer('{$variables['element']['#element']['attributes']['id']}').setup({",
    $player_settings,
    '});',
    '</script>',
  );
  return implode('', $output);

}

/**
 * Implements theme_hook().
 */
function theme_hps_media_youtube($variables) {
  global $base_url;
  $youtube_id = $variables['element']['#markup'];
  $src = array(
    'http://www.youtube.com/embed/',
    $youtube_id,
    '?autohide=1',
    '&controls=2',
    '&rel=0',
    "&origin={$base_url}",
  );
  $src = implode('', $src);
  $iframe = array(
    '<iframe',
    'id="ytplayer" type="text/html" width="100%" height="100%"',
    "src=\"{$src}\"",
    'allowfullscreen="allowfullscreen"',
    '></iframe>',
  );
  drupal_add_css(drupal_get_path('module', 'hps_media') . '/css/hps-media.css');
  return implode(' ', $iframe);
}

/**
 * Implements theme_hook().
 */
function theme_hps_media_youtube_still($variables) {
  $src = array(
    "http://{$variables['element']['#hostname']}",
    '/vi',
    "/{$variables['element']['#markup']}",
    "/{$variables['element']['#version']}.jpg",
  );
  $src = implode('', $src);
  return "<img src=\"{$src}\" alt=\"{$variables['element']['#alt']}\" />";

}


/**
 * Helper function to see if its an audio file.
 */
function _hps_media_is_audio($mimetype) {
  return in_array($mimetype, _hps_media_supported_audio_mimetypes());
}
/**
 * Helper function to see if its an audio file.
 */
function _hps_media_is_video($mimetype) {
  return in_array($mimetype, _hps_media_supported_video_mimetypes());
}
/**
 * Helper function to return attributes of the media player library.
 */
function _hps_media_player_library_info() {
  $info = &drupal_static('hps_media' . __FUNCTION__);
  if (!isset($info)) {
    if (module_exists('libraries') && ($jwplayer_library_path = libraries_get_path('jwplayer'))) {
      $jwplayer_file_path = "$jwplayer_library_path/jwplayer.js";
      if (file_exists($jwplayer_file_path)) {
        // Exclude JW Player from JS aggregation ('preprocess' => FALSE), otherwise
        // bad things happen.
        $info = array(
          'library_path' => $jwplayer_library_path,
          'js'           => array($jwplayer_file_path => array('preprocess' => FALSE)),
          'name'         => 'jwplayer',
        );
      }
    }
  }
  return $info;
}
/**
 * Helper function to return paths to js files in player library.
 */
function _hps_media_player_library_js() {
  $info = _hps_media_player_library_info();
  return (isset($info['js'])) ? $info['js'] : array();
}
/**
 * Helper function to return paths to css files.
 */
function _hps_media_css() {
  return array(drupal_get_path('module', 'hps_media') . '/css/hps-media.css');
}
/**
 * Helper function to return supported mimetypes.
 *
 * @see http://www.longtailvideo.com/support/jw-player/28836/media-format-support.
 * @note Mimetypes are limited and adjusted to Drupal's mimetype mappings for convenience.
 * @see file_default_mimetype_mapping()
 * @note Additional mimetypes could be supported here if needed.
 * @see hook_file_mimetype_mapping_alter()
 */
function _hps_media_supported_mimetypes() {
  return array_merge(_hps_media_supported_audio_mimetypes(), _hps_media_supported_video_mimetypes());
}
/**
 * Helper function to return supported audio mimetypes.
 */
function _hps_media_supported_audio_mimetypes() {
  return array(
    'audio/mp4',
    'audio/mpeg',
    'audio/ogg',
  );
}
/**
 * Helper function to return supported video mimetypes.
 */
function _hps_media_supported_video_mimetypes() {
  return array(
    'video/mp4',
    'video/x-flv'
  );
}

/**
 * Helper function to determine if a mimetype is supported by the default media
 * player.
 *
 */
function hps_media_is_mimetype_supported($mimetype) {
  return in_array($mimetype, _hps_media_supported_mimetypes());
}

/**
 * Implements hook_image_effect_info().
 */
function hps_media_image_effect_info() {
  $effects = array(
    'hps_media_scale_and_crop' => array(
      'label' => t('HPS Scale and Crop'),
      'help' => t('Scales image so that one dimension fits and the other is larger than desired, then crops ' .
                  'the remaining dimension. If the remainin dimension is width the crop will be even, if the ' .
                  'remaining dimension is height then the top is favoured depending on how drastic the crop is.'),
      'effect callback' => '_hps_media_scale_and_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
    ),
    'hps_media_crop' => array(
      'label' => t('HPS Crop'),
      'help' => t('Crops width evenly but favours top of image when cropping height depending on how drastic the crop is.'),
      'effect callback' => '_hps_media_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
    ),
    'hps_media_relative_scale' => array(
      'label' => t('HPS Relative Scale'),
      'help' => t('Scales image to a percentage of its existing dimensions. Relative scaling will maintain the aspect-ratio ' .
                  'of the original image. If only a single dimension is specified, the other dimension will be calculated. ' .
                  'If both dimensions are specified then the dimension used is the one that would not be calculated, when ' .
                  'maintaining aspect ratio, to be bigger than its target. If a minimum dimension is provided it will be used ' .
                  'to adjust the target dimension, as needed, prior to scaling. If both dimensions are provided then one of ' .
                  'the dimensions may be smaller than its minimum value.'),
      'effect callback' => '_hps_media_relative_scale_effect',
      'form callback' => '_hps_media_relative_scale_form',
      'summary theme' => 'image_resize_summary',
    ),
  );
  return $effects;
}

/**
 * Form structure for the HPS Relative scale form.
 *
 * Note that this is not a complete form, it only contains the portion of the
 * form for configuring the scale options. Therefore it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param $data
 *   The current configuration for this scale effect.
 */
function _hps_media_relative_scale_form($data) {
  $form = image_resize_form($data);
  $form['#element_validate'] = array('_hps_media_relative_scale_validate');
  $form['width']['#required'] = FALSE;
  $form['width']['#field_suffix'] = ' ' . t('% of the current width e.g. 50%');
  $form['height']['#required'] = FALSE;
  $form['height']['#field_suffix'] = ' ' . t('% of the current height e.g. 50%');
  $form['minimum_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Width'),
    '#description' => t('If set, the target width will not be set below this value.'),
    '#default_value' => isset($data['minimu_width']) ? $data['minimum_width'] : '',
    '#field_suffix' => ' ' . t('pixels'),
    '#required' => FALSE,
    '#size' => 10,
    '#element_validate' => array('image_effect_integer_validate'),
  );
  $form['minimum_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Height'),
    '#description' => t('If set, the target height will not be set below this value.'),
    '#default_value' => isset($data['minimum_height']) ? $data['minimum_height'] : '',
    '#field_suffix' => ' ' . t('pixels'),
    '#required' => FALSE,
    '#size' => 10,
    '#element_validate' => array('image_effect_integer_validate'),
  );
  return $form;
}
/**
 * Element validate handler to ensure that either a height or a width is
 * specified.
 */
function _hps_media_relative_scale_validate($element, &$form_state) {
  if (empty($element['width']['#value']) && empty($element['height']['#value'])) {
    form_error($element, t('Width and height can not both be blank.'));
  }
  if ($element['width']['#value'] >= 100) {
    form_error($element, t('Sorry, you can only scale down, relative width must be less than 100%'));
  }
  if ($element['height']['#value'] >= 100) {
    form_error($element, t('Sorry, you can only scale down, relative height must be less than 100%'));
  }
}

/**
 * Callback for HPS Scale and Crop image effect.
 *
 * @param $image
 *   An image object returned by image_load().
 * @param $data
 *   An array of attributes to use when performing the scale effect with the
 *   following items:
 *   - "width": An integer representing the desired width in pixels.
 *   - "height": An integer representing the desired height in pixels.
 *
 * @return
 *   TRUE on success. FALSE on failure to crop image.
 */
function _hps_media_scale_and_crop_effect(&$image, $data) {

  module_load_include('inc', 'hps_media', 'image.gd');

  if (!image_toolkit_invoke('hps_media_scale_and_crop', $image, $data)) {
    watchdog('image', 'HPS Scale and Crop failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['height'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Callback for HPS Crop image effect.
 *
 * @param $image
 *   An image object returned by image_load().
 * @param $data
 *   An array of attributes to use when performing the scale effect with the
 *   following items:
 *   - "width": An integer representing the desired width in pixels.
 *   - "height": An integer representing the desired height in pixels.
 *
 * @return
 *   TRUE on success. FALSE on failure to crop image.
 */
function _hps_media_crop_effect(&$image, $data) {

  module_load_include('inc', 'hps_media', 'image.gd');

  if (!image_toolkit_invoke('hps_media_crop', $image, $data)) {
    watchdog('image', 'HPS Crop failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['height'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Callback for HPS Relative Sale image effect.
 *
 * @param $image
 *   An image object returned by image_load().
 * @param $data
 *   An array of attributes to use when performing the scale effect with the
 *   following items:
 *   - "width": An integer representing the desired width as a ratio of the
 *     existing width.
 *   - "height": An integer representing the desired height as a ratio of the
 *     existing height.
 *   - "upscale": A boolean indicating that the image should be upscaled if the
 *     dimensions are larger than the original image.
 *
 * @return
 *   TRUE on success. FALSE on failure to scale image.
 *
 * @see image_gd_hp_relative_scale
 */
function _hps_media_relative_scale_effect(&$image, $data) {

  // Set sane default values.
  $data += array(
    'width' => NULL,
    'height' => NULL,
    'upscale' => FALSE,
  );

  module_load_include('inc', 'hps_media', 'image.gd');

  if (!image_toolkit_invoke('hps_media_relative_scale', $image, $data)) {
    watchdog('image', 'HPS Relative Scale failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['height'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}
