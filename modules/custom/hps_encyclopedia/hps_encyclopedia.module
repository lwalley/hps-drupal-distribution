<?php
/**
 * @file
 * Code for the HPS Encyclopedia feature.
 */

include_once 'hps_encyclopedia.features.inc';

/**
 * Implements hook_views_pre_render().
 */
function hps_encyclopedia_views_pre_render(&$view) {

  foreach ($view->result as $delta => $row) {

    // Manipulate row based on bitstream values
    if (property_exists($row, 'field_dspace_bitstream_url')) {

      // If we just wanted to get the raw values from the original entity
      // we could use views_handler_field_field::get_value() e.g.
      // $bitstreams = $view->field['dspace_bitstream_url']->get_value($row);
      // But we might need to rerender the output so we need to get the original
      // bitstream field as renderable element
      $field_alias = $view->field['dspace_bitstream_url']->field_alias;
      $entity = $row->_field_data[$field_alias]['entity'];
      $entity_type = $row->_field_data[$field_alias]['entity_type'];
      $bitstream_element = field_view_field($entity_type, $entity, 'dspace_bitstream_url');

      if ($bitstream_element) {
        foreach ($bitstream_element['#items'] as $b => $bitstream) {
          // We expect a link field type array
          if (!isset($bitstream['url'])) continue;

          $bitstream_element['#items'][$b]['mimetype'] = file_get_mimetype($bitstream['url']);

          // Hide body field if bitsream was PDF. All displays.
          // @todo move PDF text to different field so we don't have to have
          //       conditional on body, see DSpaced module.
          if (property_exists($row, 'field_body') && _is_pdf($bitstream_element['#items'][$b]['mimetype'])) {
            foreach ($view->result[$delta]->field_body as $i => $field_body_item) {
              // If the Views field style setting 'Use field template' is TRUE
              // then we get a rendered string, otherwise we get a generic render
              // #markup element. Convert rendered string into render element for
              // consistency, then hide.
              if (is_string($field_body_item['rendered'])) {
                $view->result[$delta]->field_body[$i]['rendered'] = array(
                  '#markup' => $field_body_item['rendered'],
                );
              }
              $view->result[$delta]->field_body[$i]['rendered']['#access'] = FALSE;
            }
          }
        }

        // Force hide label... hackarama... we should probably be rendering
        // through Views rather than core field render...
        $bitstream_element['#label_display'] = 'hidden';
        // Remove unsupported bitstream mimetypes from render element
        foreach ($bitstream_element['#items'] as $b => $bitstream) {
          if (!hps_media_is_mimetype_supported($bitstream['mimetype'])) {
            unset($bitstream_element['#items'][$b]);
          }
        }
        // Re-render field if we have any supported bitstreams remaining
        if (!empty($bitstream_element['#items']) && ($output = render($bitstream_element))) {
          $view->result[$delta]->field_dspace_bitstream_url[0]['rendered'] = $output;
        }
        else {
          $view->result[$delta]->field_dspace_bitstream_url[0]['rendered'] = '';
        }
      }
    }


    // Alter rendered creator string.
    if (property_exists($row, 'field_dc_creator')) {
      // Get the raw values from the original entity
      // see views_handler_field_field::get_value()
      $creators = $view->field['dc_creator']->get_value($row);
      foreach ($creators as $i => $creator) {
        // It's a multivalue field so we expect an array with a value index and
        // matching rendered values
        if (!isset($creator['value']) || !isset($row->field_dc_creator[$i]['rendered'])) continue;

        // If the Views field style setting 'Use field template' is TRUE
        // then we get a rendered string, otherwise we get a generic render
        // #markup element. Convert rendered string into render element for
        // consistency, then insert new value.
        if (is_string($row->field_dc_creator[$i]['rendered'])) {
          $view->result[$delta]->field_dc_creator[$i]['rendered'] = array();
        }
        // Reverse names if commas exist in creator. Ignore dates or anything
        // after second comma. Examples
        //     - Brode, Howard Stidham (1890-1958) => Howard Stidham Brode
        //     - Huettner, Alfred F. (Alfred Francis), b. 1884 => Alfred F. (Alfred Francis) Huettner
        //     - Coolidge, Baldwin, 1845-1948 => Baldwin Coolidge
        // @note Alternative option for multiple commas:
        //       Reverse all parts:
        //       implode(' ', array_reverse(explode(', ', $creator['value'])));
        //       Move the first part to the end with a regular expression:
        //       preg_replace('/^([^,]*),\s*(.*)$/', '$2 $1', $creator['value']);

        // Reverse first two parts of comma seperated string
        $parsed_creator = implode(' ', array_reverse(array_slice(explode(', ', $creator['value']), 0, 2, TRUE)));
        // Remove dates from string
        $parsed_creator = preg_replace('/\s[(]?\d{1,4}-?\d{1,4}[)]?/','', $parsed_creator);
        $view->result[$delta]->field_dc_creator[$i]['rendered']['#markup'] = $parsed_creator;
        unset($parsed_creator);
      }
    }
  }
}


/**
 * Helper function to determine if the bistream is a PDF
 */
function _is_pdf($mimetype) {
  return in_array($mimetype, array('text/plain', 'application/pdf'));
}

