<?php

/**
 * @file
 * Main module file for HPS Courses module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function hps_courses_ctools_plugin_api($module = '', $api = '') {
  if ($module == "feeds" && $api == "feeds_importer_default") {
    return array("version" => 1);
  }
}

/**
 * Implements hook_hook_info().
 */
function hps_courses_hook_info() {
  return array(
    'hps_courses_default' => array(
      'group' => 'hps_courses_default',
    )
  );
}

/**
 * Implements hook_node_presave().
 */
function hps_courses_node_presave($node) {
  // Set title of course node
  if ($node->type == 'hps_course') {
    $language = (isset($node->language) || property_exists($node, 'language')) ? $node->language : LANGUAGE_NONE;
    $course_name = field_get_items('node', $node, 'hps_course_name', $language);
    $course_year = field_get_items('node', $node, 'hps_course_year', $language);
    $node->title = "{$course_name[0]['value']} {$course_year[0]['value']}";
  }
}

/**
 * Implements hook_node_info().
 */
function hps_courses_node_info() {
  return array(
    'hps_course' => array(
      'name' => t('Course'),
      'base' => 'node_content', // managed by default node module
      'description' => t('Imported course.'),
      'help' => t("Don't manually create or edit, nodes are created and updated " .
                  "automatically from imported DSpace items."),
      'has_title' => TRUE,
      'title_label' => t('Name and year'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_modules_installed().
 *
 * Install HPS Course bundles and fields defined by this and other modules.
 *
 * @note Instead of creating hps_courses bundles and fields in
 * hook_install() we use this hook. The only exceptions are the node entities
 * which are defined in hook_node_info() and registered with
 * node_types_rebuild().
 *
 * @see hps_courses_hook_install().
 */
function hps_courses_modules_installed($modules) {
  foreach ($modules as $module) {
    if (module_hook($module, 'hps_courses_default')) {
      // Install HPS Courses bundles and fields defined by this and other modules
      // @see hook_hps_courses_default.
      $entities = module_invoke($module, 'hps_courses_default');
      _hps_courses_install_bundles($entities['bundles']);
      _hps_courses_install_fields($entities['fields']);
      _hps_courses_install_instances($entities['instances']);
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 *
 * Uninstall HPS Courses bundles and fields defined by other modules.
 *
 * @note Unlike hook_modules_installed() this hook is not called when this
 * module is uninstalled so we call the uninstall helper methods directly from
 * hook_uninstall().
 *
 * @see hps_courses_uninstall().
 */
function hps_courses_modules_uninstalled($modules) {
  foreach ($modules as $module) {
    if (module_hook($module, 'hps_courses_default')) {
      // Uninstall bundles and fields defined by other modules.
      $entities = module_invoke($module, 'hps_courses_default');
      _hps_courses_uninstall_bundles($entities['bundles']);
      _hps_courses_uninstall_fields($entities['fields']);
    }
  }
}

/**
 * Helper function to create vocabularies and update custom node types.
 */
function _hps_courses_install_bundles($bundles) {
  foreach ($bundles as $entity_type => $bundle) {
    foreach ($bundle as $machine_name => $info) {
      switch($entity_type) {
        case 'taxonomy_term':
          // Create vocabularies
          taxonomy_vocabulary_save((object) $info);
          break;
        case 'node':
          $info = node_type_set_defaults($info);
          node_type_save($info);
          break;
      }
    }
  }
}

/**
 * Helper function to create fields.
 */
function _hps_courses_install_fields($fields) {
  foreach ($fields as $field) {
    field_create_field($field);
  }
}

/**
 * Helper function to create field instances on custom bundles.
 */
function _hps_courses_install_instances($instances) {
  foreach($instances as $entity_type => $bundles) {
    foreach ($bundles as $bundle_name => $bundle_instances) {
      foreach ($bundle_instances as $instance) {
        $instance['entity_type'] = $entity_type;
        $instance['bundle'] = $bundle_name;
        field_create_instance($instance);
      }
    }
  }
}

/**
 * Helper function to delete vocabularies and field instances.
 */
function _hps_courses_uninstall_bundles(Array $bundles) {
  foreach ($bundles as $entity_type => $bundles) {
    foreach ($bundles as $machine_name => $bundle) {
      $instances = field_info_instances($entity_type, $machine_name);
      foreach ($instances as $instance_name => $instance) {
        field_delete_instance($instance, FALSE);
      }
      switch ($entity_type) {
        case 'taxonomy_term':
          if ($vocabulary = taxonomy_vocabulary_machine_name_load($machine_name)) {
            taxonomy_vocabulary_delete($vocabulary->vid);
          }
          break;
      }
    }
  }
}

/**
 * Helper function to delete fields.
 */
function _hps_courses_uninstall_fields(Array $fields) {
  $existing_fields = array_keys(field_info_fields());
  foreach (array_keys($fields) as $field_name) {
    if (in_array($field_name, $existing_fields)) {
      field_delete_field($field_name);
    }
  }
  field_purge_batch(1000);
}
