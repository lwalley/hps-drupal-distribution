/**
 * @file
 * Positioning for responsive layout.
 *
 * Uses the Zen Grids plugin for Compass: http://zengrids.com
 */

@import "base";

//
// Default settings for all layouts.
//
// @note Mobile first approach so by default we have styles specific to mobile phones, basically
//       anything with a max-width < 480px. We start with a 3 column zen grid and mostly we have a
//       single column layout.

// Default responsive widths for image styles defined in hps_defaults feature.
// @see modules/custom/hps_defaults
span.hpszen-responsive {
  &.hps-original,
  &.hps-principal,
  &.hps-supplemental,
  &.hps-minor,
  &.hps-uniform {
    display: inline-block;
    img {
      max-width: 100%;
    }
  }
}
@mixin hpszen-adjust-responsive-images($adjustment, $base: 12) {
  span.hpszen-responsive {
    &.hps-original {
      width: (1em / $base) * 350 * $adjustment;
    }
    &.hps-principal {
      width: (1em / $base) * 350 * $adjustment;
    }
    &.hps-supplemental {
      width: (1em / $base) * 200 * $adjustment;
    }
    &.hps-minor {
      width: (1em / $base) * 100 * $adjustment;
    }
    &.hps-uniform {
      width: (1em / $base) * 200 * $adjustment;
    }
  }
}
@include hpszen-adjust-responsive-images(1);

// body: These are children of body and thus the containers for zen grids.
#page,
.region-bottom {
  @include zen-grid-container();
}

// #page: Add children of #page to grid
#page {
  @include padding-trailer(3);
}
// Children of #page span all columns and are nested containers.
#header,
#main,
#footer {
  @include zen-grid-item-base();
  @include zen-clear();
  @include zen-grid-item($zen-column-count, 1);
  // @note zen-nested-container() must come after zen-grid-item().
  @include zen-nested-container();
}

// #header: Add children of #header
// Excludes #logo we handle that separately
#header {
  position: relative;
  @include padding-leader(2);
}
#name-and-slogan,
#secondary-menu,
.region-header {
  @include zen-grid-item-base();
}
#name-and-slogan,
.region-header {
  @include zen-grid-item(12, 1);
}
#secondary-menu {
  @include zen-grid-item(8, 5);
}
.region-header {
  @include zen-clear();
}
// #logo is a flow item
#logo {
  @include zen-grid-flow-item(4, 12);
}


// Navigation: Add #navigation to grid
#navigation {
  @include zen-grid-item-base();
  @include zen-clear();
  @include zen-grid-item(12, 1);
}

// Content: Apply base grid and gutters
@include hpszen-adjust-base-gutter(1);
// Content: give content some leading and trailing padding
#content {
  @include padding-leader(1);
  @include padding-trailer(1);
}

// Region: page-top toolbar
// When logged admin toolbar needs some room.
// @todo toolbar can vary in height, this is the max it needs but will look rubbish with shorter toolbar
//       fix it with different styles, or maybe switch to single /admin menu item.
.toolbar {
  #page {
    position: relative;
    @include padding-leader(0.8);
  }
}

// #footer: add children of footer to grid.
#footer {
  @include zen-nested-container();
  // Give blocks some top and bottom room
  @include rhythm(0, 1, 1, 0);
  .block {
    @include zen-grid-item-base();
    @include zen-clear();
    @include zen-grid-item(12, 1);
  }
}


// Start of overrides for wider screens
// Font: increase base font size as screens get wider
// Content increase base grid and gutters
@media all and (min-width: 1em / 16 * 481) and (max-width: 1em / 16 * 1023) {
  @include hpszen-adjust-base-gutter(2);
  @include hpszen-increase-base-font-sizes(1.3);
  @include hpszen-adjust-responsive-images(1.5, 13);
}
@media all and (min-width: 1em / 16 * 1024) {
  @include hpszen-adjust-base-gutter(3);
  @include hpszen-increase-base-font-sizes(1.4);
  @include hpszen-adjust-responsive-images(2, 13);
}

// Header: two columns
@media all and (min-width: 1em / 16 * 768) {
  #header {
    #logo,
    #name-and-slogan {
      @include zen-grid-item(6, 1);
    }
    .region-header,
    #secondary-menu {
      @include zen-grid-item(6, 7);
    }
    .region-header {
      clear: none;
    }
  }
}

// Navigation: switch to horizontal nav for wider screens.
// Must match the js threshold for horizontal menu
// @see js/script.js
@media all and (min-width: 1em / 16 * 699) {
  // Convert main menu to horizontal bar.
  #navigation {
    @include margin-trailer(1);
    .block-menu .block-title,
    .block-menu-block .block-title {
      @include element-invisible;
    }
    .block-menu {
      > ul {
        float: left;
        > li {
          float: left;
          list-style-position: inside;
        }
      }
    }
  }
}

// Content: asides two columns, underneath content
@media all and (min-width: 1em / 16 * 600) and (max-width: 1em / 16 * 767) {
  // Make aside nested container and assign grids to children
  #content {
    .panel-hpszen-downside-box,
    .panel-hpszen-aside-box {
      @include zen-nested-container();
      .panel-pane {
        @include zen-grid-item-base();
        &:nth-child(2n+1) {
          // New row
          @include zen-grid-item(6, 1);
          @include zen-clear();
        }
        &:nth-child(2n) {
          @include zen-grid-item(6, 7);
          clear: none;
        }
      }
    }
  }
}
// Content: asides adjacent to content
@media all and (min-width: 1em / 16 * 768) {
  .hpszen-primary-aside-boxes,
  .hpszen-primary-downsides-boxes {
    #content {
      .panel-hpszen-primary-box {
        @include zen-grid-item(8, 1);
      }
      .panel-hpszen-aside-box {
        @include zen-grid-item(4, 9);
        clear: none;
      }
      .panel-hpszen-downside-box {
        // Three rows
        @include zen-nested-container();
        .panel-pane {
          @include zen-grid-item-base();
          &:nth-child(3n+1) {
            // New row
            @include zen-grid-item(4, 1);
            @include zen-clear();
          }
          &:nth-child(2n) {
            @include zen-grid-item(4, 5);
            clear: none;
          }
          &:nth-child(3n) {
            @include zen-grid-item(4, 9);
            clear: none;
          }
        }
      }
    }
  }
  .hpszen-primary-upside-boxes {
    #content {
      .panel-hpszen-primary-box {
        @include zen-grid-item(8, 1);
        clear: none;
      }
      .panel-hpszen-upside-box {
        @include zen-grid-item(4, 9);
      }
    }
  }
}


// Footer: two columns
// Footer is already nested container so just re-assign grids to child blocks
@media all and (min-width: 1em / 16 * 500) and (max-width: 1em / 16 * 699)  {
  #footer {
    .block {
      clear: none;
      &:nth-child(2n+1) {
        // New row
        @include zen-grid-item(6, 1);
        @include zen-clear();
      }
      &:nth-child(2n) {
        @include zen-grid-item(6, 7);
      }
    }
  }
}
// Footer: three columns
// Footer is already nested container so just re-assign grids to child blocks
@media all and (min-width: 1em / 16 * 700) {
  #footer {
    .block {
      clear: none;
      &:nth-child(3n+1) {
        // New row
        @include zen-grid-item(4, 1);
        @include zen-clear();
      }
      &:nth-child(3n) {
        @include zen-grid-item(4, 5);
      }
      &:nth-child(2n) {
        @include zen-grid-item(4, 9);
      }
    }
  }
}

// Content: More whitespace needed for wider screens.
// @todo it would be better if we could reset gutter width and reapply grid

Messages icons need some room, so we override grid padding
#content {
  .messages {
    padding-left: 50px !important;
  }
}

