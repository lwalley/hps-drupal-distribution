/**
 * @file
 * Positioning for responsive layout.
 *
 * Uses the Zen Grids plugin for Compass: http://zengrids.com
 */

@import "base";

//
// Default settings for all layouts.
//
// @note Mobile first approach so by default we have styles specific to mobile phones, basically
//       anything with a max-width < 480px. We start with a single column layout.
//
#page,
.region-bottom {
  // Center content if we later apply max width.
  margin-left: auto;
  margin-right: auto;
}

/**
 * Container for grid items and flow items.
 */
#page {
  @include zen-grid-container();
}

//
// Manually apply the shared properties of grid items in a single, efficient ruleset.
// In other words don't use $zen-auto-include-item-base.
#header,
#navigation,
#content,
.panel-hpszen-primary-box,
.region-sidebar-first,
.region-sidebar-second,
#footer {
  @include zen-grid-item-base();
}

#content {
  // Needs some room
  padding: 3%;
}

// When we have HPS Zen panels #content turns into container so we need to add base
// styles to child elements
.hpszen-primary-box {
  #content {
    .breadcrumb,
    .messages,
    > h1,
    > h2,
    > .tabs {
      @include zen-grid-item-base();
      @include zen-clear();
    }
  }
}

#main,
#navigation,
#content,
#footer,
#secondary-menu,
.panel-hpszen-primary-box {
  @include zen-clear();
}

#name-and-slogan {
  h1 {
    @include adjust-font-size-to($name-font-size);
  }
  h2 {
    @include adjust-font-size-to($slogan-font-size);
  }
}
#logo {
  @include adjust-font-size-to($name-font-size);
  @include adjust-leading-to(3, $name-font-size);
  @include leader(1, $name-font-size);
  margin-right: rhythm(1, $name-font-size);
  img {
    max-height: rhythm(3, $name-font-size);
  }
}

#secondary-menu {
  .block-menu .block-title,
  .block-menu-block .block-title {
    @include element-invisible;
  }
}

@media all and (min-width: 600px) {
  $name-font-size: 3.5  * $base-font-size;
  #name-and-slogan {
    float: left;
    h1 {
      @include adjust-font-size-to($name-font-size);
      @include leader(1, $h1-font-size);
    }
    h2 {
      @include adjust-font-size-to($slogan-font-size);
    }
  }
  #logo {
    @include adjust-font-size-to($name-font-size);
    @include adjust-leading-to(3, $name-font-size);
    @include leader(1, $name-font-size);
    margin-right: rhythm(1, $name-font-size);
    img {
      max-height: rhythm(3, $name-font-size);
    }
  }
  // Convert primary and secondary navigation into horizontal
  // lists since screen width is large enough to accomadate them.
  #secondary-menu {
    float: right;
    clear: none;
    ul {
      @include adjust-leading-to(3);
      @include delimited-list('|');
    }
    a {
      padding: rhythm(0.5);
    }
  }
  #navigation {
    .block-menu .block-title,
    .block-menu-block .block-title {
      @include element-invisible;
    }
    .block-menu {
      > ul {
        float: left;
        padding: 0;
        > li {
          float: left;
          list-style-position: inside;
          margin-right: $zen-gutter-width / 2;
        }
      }
      ul {
        a {
          padding: 0 rhythm(0.5);
        }
      }
    }
  }
}

// Start of media queries, taking layout beyond single column.
// @note Aim is to maintain golden ratio whilst preserving the readability of the content.
//       We do this, depending on screen size, by:
//         1. limiting the max width of all content (for readability don't want much more than ~15 words per line)
//         2. filling extra space with (a) wider columns, and/or (b) more columns.


// Screen sizes that can handle two columns underneath main content.
@media all and (min-width: 600px) and (max-width: 719px) {
  $zen-column-count:  2;
  #header,
  #navigation,
  #footer,
  #content {
    @include zen-grid-item(2, 1);
  }

  .one-sidebar {
    .region-sidebar-first,
    .region-sidebar-second {
      @include zen-grid-item(2, 1);
    }
  }

  .two-sidebars {
    .region-sidebar-first {
      @include zen-grid-item(1, 1);
    }
    .region-sidebar-second {
      @include zen-grid-item(1, 2);
    }
  }
  // With HPS Zen panel layouts #content is a nested container with $zen-column-count columns
  // So we need to make all child containers, including panels, grid items.
  .hpszen-primary-box {
    #content {
      .breadcrumb,
      .messages,
      > h1,
      > h2,
      > .tabs,
      .panel-hpszen-primary-box {
        @include zen-grid-item(2, 1);
      }
    }
  }

  // Two column footer
  .region-footer {
    @include zen-nested-container();
    .block {
      @include zen-grid-item-base();
    }
    .block:nth-child(2n+1) {
      @include zen-grid-item(1, 1);
      @include zen-clear(); /* Start a new row */
    }
    .block:nth-child(2n) {
      @include zen-grid-item(1, 2);
    }
  }

}

// Screen sizes that can handle one extra column adjacent to content, rest underneath.
@media all and (min-width: 720px) and (max-width: 1199px) {
  $zen-column-count:  3;
  #header,
  #navigation,
  #footer,
  .no-sidebars #content {
    @include zen-grid-item(3, 1);
  }

  // Golden ratio layout when we have content and one sidebar (first or second).
  .one-sidebar {
    #content {
      @include zen-grid-item(2, 1);
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include zen-grid-item(1, 3);
    }
  }
  // Golden ratio layout when we have content and two sidebars, with second sidebar underneath.
  .two-sidebars {
    #content {
      @include zen-grid-item(2, 1);
    }
    .region-sidebar-first {
      @include zen-grid-item(1, 3);
    }
    // Span all columns with the second sidebar, and grid the descendent .block containers instead.
    .region-sidebar-second {
      @include zen-grid-item(3, 1);
      @include zen-nested-container();
      @include zen-clear(); /* Start new row */

      .block {
        @include zen-grid-item-base();
      }
      .block:nth-child(3n+1) {
        @include zen-grid-item(1, 1);
        @include zen-clear(); /* Start a new row */
      }
      .block:nth-child(3n+2) {
        @include zen-grid-item(1, 2);
      }
      .block:nth-child(3n) {
        @include zen-grid-item(1, 3);
      }
    }
  }

  // Three column footer
  .region-footer {
    @include zen-nested-container();
    .block {
      @include zen-grid-item-base();
    }
    .block:nth-child(3n+1) {
      @include zen-grid-item(1, 1);
      @include zen-clear(); /* Start a new row */
    }
    .block:nth-child(3n+2) {
      @include zen-grid-item(1, 2);
    }
    .block:nth-child(3n) {
      @include zen-grid-item(1, 3);
    }
  }

  // With HPS Zen panel layouts #content is a nested container with $zen-column-count columns
  // So we need to make all child containers, including panels, grid items.
  .hpszen-primary-box {
    #content {
      .breadcrumb,
      .messages,
      > h1,
      > h2,
      > .tabs,
      .panel-hpszen-primary-box {
        @include zen-grid-item(3, 1);
      }
    }
  }
}
// Still with one extra column but we use columns in addition to gutters for more fluid whitespace.
@media all and (min-width: 1200px) and (max-width: 1999px) {
  $zen-column-count:  24;
  #header,
  #navigation,
  #footer,
  .no-sidebars #content {
    @include zen-grid-item(20, 3);
  }

  // Golden ratio (ish) layout when we have content and one sidebar (first or second).
  .one-sidebar {
    #content {
      @include zen-grid-item(12, 3);
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include zen-grid-item(7, 16);
    }
  }

  // Golden ratio layout when we have content and two sidebars, with second sidebar underneath.
  .two-sidebars {
    #content {
      @include zen-grid-item(12, 3);
    }
    .region-sidebar-first {
      @include zen-grid-item(7, 16);
    }
    // Span all columns with the second sidebar, and grid the descendent .block containers instead.
    .region-sidebar-second {
      @include zen-grid-item(20, 3);
      @include zen-nested-container();
      @include zen-clear(); /* Start new row */

      .block {
        @include zen-grid-item-base();
      }
      .block:nth-child(3n+1) {
        @include zen-grid-item(7, 1);
        @include zen-clear(); /* Start a new row */
      }
      .block:nth-child(3n+2) {
        @include zen-grid-item(8, 9);
      }
      .block:nth-child(3n) {
        @include zen-grid-item(7, 18);
      }
    }
  }

  // Three column footer
  .region-footer {
    @include zen-nested-container();
    .block {
      @include zen-grid-item-base();
    }
    .block:nth-child(3n+1) {
      @include zen-grid-item(7, 1);
      @include zen-clear(); /* Start a new row */
    }
    .block:nth-child(3n+2) {
      @include zen-grid-item(8, 9);
    }
    .block:nth-child(3n) {
      @include zen-grid-item(7, 18);
    }
  }


  // With HPS Zen panel layouts #content is a nested container with $zen-column-count columns
  // So we need to make all child containers, including panels, grid items.
  .hpszen-primary-box {
    #content {
      .breadcrumb,
      .messages,
      > h1,
      > h2,
      > .tabs,
      .panel-hpszen-primary-box {
        @include zen-grid-item(24, 1);
      }
    }
  }
}

// Screen sizes that can handle two extra columns.
// We use columns in addition to gutters for whitespace between columns.
@media all and (min-width: 2000px) {
  $zen-column-count:  27;
  #header,
  #navigation,
  #footer,
  .no-sidebars #content {
    @include zen-grid-item(19, 5);
  }

  .one-sidebar {
    #content {
      @include zen-grid-item(11, 5);
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include zen-grid-item(4, 17);
    }
  }

  .two-sidebars {
    #content {
      @include zen-grid-item(11, 5);
    }
    .region-sidebar-first {
      @include zen-grid-item(4, 17);
    }
    .region-sidebar-second {
      @include zen-grid-item(3, 21);
    }
  }

  // Three column footer
  .region-footer {
    @include zen-nested-container();
    .block {
      @include zen-grid-item-base();
    }
    .block:nth-child(3n+1) {
      @include zen-grid-item(11, 5);
      @include zen-clear(); /* Start a new row */
    }
    .block:nth-child(3n+2) {
      @include zen-grid-item(4, 17);
    }
    .block:nth-child(3n) {
      @include zen-grid-item(3, 21);
    }
  }

  // With HPS Zen panel layouts #content is a nested container with $zen-column-count columns
  // So we need to make all child containers, including panels, grid items.
  .hpszen-primary-box {
    #content {
      .breadcrumb,
      .messages,
      > h1,
      > h2,
      > .tabs,
      .panel-hpszen-primary-box {
        @include zen-grid-item(27, 1);
      }
    }
  }
}

// When we have HPS Zen panel layouts make #content a nested container.
// This must be applied after #content receives grid_item
// @see hpszen_preprocess_html().
.hpszen-primary-box {
  #content {
    @include zen-nested-container();
    // Put padding back... might mess up grids?
    padding: 3%;
  }
}

