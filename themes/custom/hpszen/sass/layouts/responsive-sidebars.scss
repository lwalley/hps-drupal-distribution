/**
 * @file
 * Positioning for responsive layout.
 *
 * Uses the Zen Grids plugin for Compass: http://zengrids.com
 */

@import "base";

// Default Zen Grids settings.
$zen-column-count:  1;
$zen-gutter-width:  40px;


// IE6-7 don't support box-sizing: border-box. We can fix this in 1 of 3 ways:
// - Drop support for IE 6/7. :-) In the _base.scss, set $legacy-support-for-ie6
//   and $legacy-support-for-ie7 to false.
// - (Preferred) Install the box-sizing polyfill and set the variable below to
//   the absolute path URL to the boxsizing.htc file.
//   @see https://github.com/Schepp/box-sizing-polyfill
//   $box-sizing-polyfill-path: "/path/to/boxsizing.htc";
// - Use the same CSS unit for grid width and gutter width (use px for both or
//   use % for both, etc.) and set the box-sizing variable to content-box.
//   $zen-box-sizing: content-box;


// More efficient if we set item-base manually.
$zen-auto-include-item-base: false;
// $zen-auto-include-flow-item-base: false;


//
// Default settings for all layouts.
//
// @note Mobile first approach so by default we have a single column layout.
//
#page,
.region-bottom {
  margin-left: auto;
  margin-right: auto;
  // Use max-width to prevent excessively wide lines of text in wider screens.
  max-width: 1400px;
}

//
// Manually apply the shared properties of grid items in a single, efficient ruleset.
// In other words don't use $zen-auto-include-item-base.
//
#header,
#content,
#navigation,
.region-sidebar-first,
.region-sidebar-second,
#footer {
  @include zen-grid-item-base();
}

/**
 * Containers for grid items and flow items.
 */
#header,
#main,
#footer {
  @include zen-grid-container();
}
#header {
  margin-top: 2em;
}



/**
 * Position navigation bar above content for wider screens.
 * By default it is below content.
 */
@media all and (min-width: 480px) {
  #main {
    padding-top: 3em; /* Move all the children of #main down to make room. */
    position: relative;
  }
  #navigation {
    position: absolute;
    top: 0; /* Move the navbar up inside #main's padding. */
    height: 3em;
    width: $zen-grid-width;
  }
}

@media all and (min-width: 480px) and (max-width: 959px) {
  $zen-column-count:  3;
  /**
   * Layout when we only have content and one sidebar (first or second).
   */
  .one-sidebar {
    #content {
      @include zen-grid-item(2, 1);
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include zen-grid-item(1, 3);
    }
  }

  /**
   * Layout when we have content and two sidebars.
   */
  .two-sidebars {
    #content {
      @include zen-grid-item(2, 1);
    }
    .region-sidebar-first {
      @include zen-grid-item(1, 3);
    }

    /**
     * For smaller screens we span all columns with the second sidebar,
     * and grid the descendent .block containers instead.
     */
    .region-sidebar-second {
      @include zen-grid-item(3, 1);
      @include zen-nested-container();
      @include zen-clear(); /* Start new row */

      .block {
        @include zen-grid-item-base();
      }
      .block:nth-child(3n+1) {
        @include zen-grid-item(1, 1);
        @include zen-clear(); /* Start a new row */
      }
      .block:nth-child(3n+2) {
        @include zen-grid-item(1, 2);
      }
      .block:nth-child(3n) {
        @include zen-grid-item(1, 3);
      }
    }
  }
}

@media all and (min-width: 960px) {
  $zen-column-count:  5;
  /**
   * Layout when there is only content and one sidebar (first or second).
   */
  .one-sidebar {
    #content {
      @include zen-grid-item(3, 1);
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include zen-grid-item(2, 4);
    }
  }

  /**
   * Layout when there is content and two sidebars.
   */
  .two-sidebars {
    #content {
      @include zen-grid-item(3, 1);
    }
    .region-sidebar-first {
      @include zen-grid-item(1, 4);
    }
    .region-sidebar-second {
      @include zen-grid-item(1, 5);
    }
  }
}
